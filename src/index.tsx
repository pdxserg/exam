import { configureStore } from "@reduxjs/toolkit";
import { createApi, fetchBaseQuery } from "@reduxjs/toolkit/query/react";
import React from "react";
import { createRoot } from "react-dom/client";
import { Provider } from "react-redux";

// Types
type Todolist = {
	id: string;
	title: string;
	order: number;
	createdAt: string;
	updatedAt: string;
	completed: boolean;
};

const api = createApi({
	reducerPath: "api",
	baseQuery: async (args, api, extraOptions) => {
		await new Promise((resolve) => setTimeout(resolve, 1000)); // –≠–º—É–ª—è—Ü–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏

		return fetchBaseQuery({ baseUrl: "https://exams-frontend.kimitsu.it-incubator.io/api/" })(
			args,
			api,
			extraOptions,
		);
	},
	endpoints: (builder) => {
		const url = Math.random() < 0.5 ? "todos" : "todosüë∫";
		return {
			todolists: builder.query<Todolist[], void>({
				query: () => url,
			}),
		};
	},
});

const { useTodolistsQuery } = api;

// Component
const App = () => {
	// ‚ùó–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏–∑–∞—Ü–∏—é –∑–∞–ø—Ä–µ—â–µ–Ω–æ
	const data = useTodolistsQuery();
	console.log(data)
	// const { isLoading, isSuccess, isError} = useTodolistsQuery();




	return (
		<>
			{
				<>
					{data.data?.map((t) => {
						return (
							<div style={t.completed ? { color: "grey" } : {}} key={t.id}>
								<input type="checkbox" checked={t.completed} />
								<b>–û–ø–∏—Å–∞–Ω–∏–µ</b>: {t.title}
							</div>
						);
					})}
				</>
			}
			{/*‚úÖ‚úÖ‚úÖ*/}
			{data.isLoading && <h2>–ó–∞–≥—Ä—É–∑–∫–∞...</h2>}
			{data.isSuccess && <h2>üë©‚Äçüíª –°–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–æ–¥: BHOlh#</h2>}
			{data.isError && <h2> Error: üë∫üë∫üë∫</h2>}
		</>
	);
};

// Store
const store = configureStore({
	reducer: {
		[api.reducerPath]: api.reducer,
	},
	middleware: (getDefaultMiddleware) => getDefaultMiddleware().concat(api.middleware),
});

createRoot(document.getElementById("root")!).render(
	<Provider store={store}>
		<App />
	</Provider>,
);

// üìú –û–ø–∏—Å–∞–Ω–∏–µ:
// –¢—É–¥—É–ª–∏—Å—Ç—ã —Å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é –≤ 50% –ø–æ–¥–≥—Ä—É–∂–∞—é—Å—è —É—Å–ø–µ—à–Ω–æ –∏–ª–∏ –ø–∞–¥–∞—é—Ç —Å –æ—à–∏–±–∫–æ–π.
// –ù–æ –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ –Ω–∞ —ç–∫—Ä–∞–Ω–µ –º—ã –≤–∏–¥–∏–º: –ó–∞–≥—Ä—É–∑–∫—É, —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–æ–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ

// ü™õ –ó–∞–¥–∞—á–∞:
// –ß—Ç–æ –Ω—É–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å –≤–º–µ—Å—Ç–æ "‚ùóX","‚ùóY" –∏ "‚ùóZ" –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã:
// 1. –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–∫–∞–∑—ã–≤–∞–ª–∞—Å—å —Ç–æ–ª—å–∫–æ –≤–æ –≤—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏
// 2. –°–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–æ–¥ –ø–æ–∫–∞–∑—ã–≤–∞–ª–∞—Å—å —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ
// 3. –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑—ã–≤–∞–ª–∞—Å—å —Ç–æ–ª—å–∫–æ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏

// ‚ùó –û—Ç–≤–µ—Ç –¥–∞–π—Ç–µ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª
// üñ• –ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: one two three