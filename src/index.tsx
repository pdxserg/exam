import { configureStore, createSlice } from "@reduxjs/toolkit";
import { createRoot } from "react-dom/client";
import { Provider, useDispatch, useSelector } from "react-redux";

// slice
const slice = createSlice({
	name: "playlist",
	initialState: {
		albums: [
			{
				id: 1,
				title: "Album 1",
				songs: [
					{ id: 1, title: "Song 1-1" },
					{ id: 2, title: "Song 1-2" },
				],
			},
			{
				id: 2,
				title: "Album 2",
				songs: [
					{ id: 3, title: "Song 2-1" },
					{ id: 4, title: "Song 2-2" },
				],
			},
		],
	},
	reducers: {
		removeLastSongFromAlbum: (state, action) => {
			return state;
		},
	},
});

const { removeLastSongFromAlbum } = slice.actions;

// App.tsx
const App = () => {
	const albums = useSelector((state: RootState) => state.playlist.albums);
	const dispatch = useDispatch();

	const removeLastSong = (albumId: number) => {
		dispatch(removeLastSongFromAlbum(albumId));
	};

	return (
		<>
			{albums.map((album) => (
				<div key={album.id}>
					<h3>{album.title}</h3>
					<button onClick={() => removeLastSong(album.id)}>Remove Last Song</button>
					<ul>
						{album.songs.map((song) => (
							<li key={song.id}>{song.title}</li>
						))}
					</ul>
				</div>
			))}
		</>
	);
};

// store.ts
export const store = configureStore({
	reducer: {
		playlist: slice.reducer,
	},
});

export type RootState = ReturnType<typeof store.getState>;

// main.ts
createRoot(document.getElementById("root")!).render(
	<Provider store={store}>
		<App />
	</Provider>,
);

// üìú –û–ø–∏—Å–∞–Ω–∏–µ:
// –ü–ª–µ–π–ª–∏—Å—Ç —Ä–∞–∑–¥–µ–ª—ë–Ω –Ω–∞ –∞–ª—å–±–æ–º—ã, –∏ –∫–∞–∂–¥–∞—è –∫–Ω–æ–ø–∫–∞ Remove Last Song –¥–æ–ª–∂–Ω–∞ —É–¥–∞–ª—è—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é –ø–µ—Å–Ω—é –∏–∑ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ –∞–ª—å–±–æ–º–∞.

// ü™õ –ó–∞–¥–∞—á–∞:
// –ü–µ—Ä–µ–ø–∏—à–∏—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–µ–π—Ç–∞ —Ç–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º, —á—Ç–æ–±—ã –æ–ø–∏—Å–∞–Ω–∏–µ –≤—ã—à–µ –≤—ã–ø–æ–ª–Ω—è–ª–æ—Å—å
// –í –∫–∞—á–µ—Å—Ç–≤–µ –æ—Ç–≤–µ—Ç–∞ —É–∫–∞–∂–∏—Ç–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∫–æ–¥ –Ω–∞–ø–∏—Å–∞–Ω–Ω—ã–π –≤–º–µ—Å—Ç–æ return state.
// ‚ùó–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–µ–π—Ç–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–æ –º—É—Ç–∞–±–µ–ª—å–Ω—ã–º –æ–±—Ä–∞–∑–æ–º.
// ‚ùó–ù–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏–∑–∞—Ü–∏—é action.payload (const {id} = action.payload)
// ‚ùó–ù–µ —Å–æ–∑–¥–∞–≤–∞–π—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ action.payload (const id = action.payload.id)