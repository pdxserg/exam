import React from "react";
import ReactDOM from "react-dom/client";
import { Provider, TypedUseSelectorHook, useDispatch, useSelector } from "react-redux";
import axios from "axios";
import { ThunkAction, ThunkDispatch } from "redux-thunk";
import { configureStore, combineReducers } from "@reduxjs/toolkit";

// Types
type PhotoType = {
	albumId: string;
	id: string;
	title: string;
	url: string;
};

// Api
const instance = axios.create({ baseURL: "https://exams-frontend.kimitsu.it-incubator.io/api/" });

const photosAPI = {
	getPhotos() {
		return instance.get<PhotoType[]>("photos?delay=2");
	},
};

// Reducer
const initState = {
	isLoading: false,
	photos: [] as PhotoType[],
};

type InitStateType = typeof initState;

const photoReducer = (state: InitStateType = initState, action: ActionsType): InitStateType => {
	switch (action.type) {
		case "PHOTO/GET-PHOTOS":
			return { ...state, photos: action.photos };
		case "PHOTO/IS-LOADING":
			return { ...state, isLoading: action.isLoading };
		default:
			return state;
	}
};

const getPhotosAC = (photos: PhotoType[]) => ({ type: "PHOTO/GET-PHOTOS", photos }) as const;
const setLoadingAC = (isLoading: boolean) => ({ type: "PHOTO/IS-LOADING", isLoading }) as const;
type ActionsType = ReturnType<typeof getPhotosAC> | ReturnType<typeof setLoadingAC>;

const getPhotosTC = (): AppThunk => (dispatch) => {
	dispatch(setLoadingAC(true));
	photosAPI.getPhotos().then((res) => {
		dispatch(getPhotosAC(res.data));
	});
};

// Store
const rootReducer = combineReducers({
	photo: photoReducer,
});

const store = configureStore({ reducer: rootReducer });
type RootState = ReturnType<typeof store.getState>;
type AppDispatch = ThunkDispatch<RootState, unknown, ActionsType>;
type AppThunk<ReturnType = void> = ThunkAction<ReturnType, RootState, unknown, ActionsType>;
const useAppDispatch = () => useDispatch<AppDispatch>();
const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;

// Loader
export const Loader = () => {
	return <h1>Loading ...</h1>;
};

// App
const App = () => {
	const dispatch = useAppDispatch();
	const photos = useAppSelector((state) => state.photo.photos);
	const isLoading = useAppSelector((state) => state.photo.isLoading);

	const getPhotosHandler = () => {
		dispatch(getPhotosTC());
	};

	return (
		<>
			<h1>üì∏ –§–æ—Ç–æ</h1>
			<button onClick={getPhotosHandler}>–ü–æ–¥–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏</button>
			{isLoading && <Loader />}
			<div style={{ display: "flex", gap: "20px", margin: "20px" }}>
				{photos.map((p) => {
					return (
						<div key={p.id}>
							<b>title</b>: {p.title}
							<div>
								<img src={p.url} alt="" />
							</div>
						</div>
					);
				})}
			</div>
		</>
	);
};

const root = ReactDOM.createRoot(document.getElementById("root") as HTMLElement);
root.render(
	<Provider store={store}>
		<App />
	</Provider>,
);

// üìú –û–ø–∏—Å–∞–Ω–∏–µ:
// –ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ü–æ–¥–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏" –≤—ã –¥–æ–ª–∂–Ω—ã —É–≤–∏–¥–µ—Ç—å Loading...,
// –∏ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏.
// –ù–æ –ø–æ—Å–ª–µ –ø–æ–¥–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö Loader –Ω–µ —É–±–∏—Ä–∞–µ—Ç—Å—è.
// –ö–∞–∫–æ–π –∫–æ–¥ –Ω—É–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å, —á—Ç–æ–±—ã Loader –ø–µ—Ä–µ—Å—Ç–∞–ª –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
// –í –∫–∞—á–µ—Å—Ç–≤–µ –æ—Ç–≤–µ—Ç–∞ –Ω–∞–ø–∏—à–∏—Ç–µ —Å—Ç—Ä–æ–∫—É –∫–æ–¥–∞.

// üñ• –ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: console.log('stop Loader')