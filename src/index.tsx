import { configureStore, createSlice } from "@reduxjs/toolkit";
import { createRoot } from "react-dom/client";
import { Provider, useDispatch, useSelector } from "react-redux";

// slice
const slice = createSlice({
	name: "tickets",
	initialState: [
		{ id: 1, event: "Concert", available: true, price: 100 },
		{ id: 2, event: "Movie", available: false, price: 50 },
		{ id: 3, event: "Theater", available: true, price: 75 },
	],
	reducers: {
		applyDiscount: (state, action) => {
			state.forEach(e=>e.price=e.price+(e.price*action.payload)/100)
		},
	},
});

const { applyDiscount } = slice.actions;

// App.tsx
const App = () => {
	const tickets = useSelector((state: RootState) => state.tickets);
	const dispatch = useDispatch();

	const handleDiscount = (discount: number) => {
		dispatch(applyDiscount(discount));
	};

	return (
		<div>
			<button onClick={() => handleDiscount(20)}>20% Discount</button>
			<button onClick={() => handleDiscount(50)}>50% Discount</button>
			<button onClick={() => handleDiscount(80)}>80% Discount</button>
			<ul>
				{tickets.map((ticket) => (
					<li key={ticket.id}>
            <span>
              {ticket.event} ({ticket.available ? "Available" : "Sold Out"}) - $
	            {ticket.price.toFixed(2)}
            </span>
					</li>
				))}
			</ul>
		</div>
	);
};

// store.ts
export const store = configureStore({
	reducer: {
		tickets: slice.reducer,
	},
});

export type RootState = ReturnType<typeof store.getState>;

// main.ts
createRoot(document.getElementById("root")!).render(
	<Provider store={store}>
		<App />
	</Provider>,
);

// üìú –û–ø–∏—Å–∞–Ω–∏–µ:
// –ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫–∏ —Å 20%, 50% –∏–ª–∏ 80% —Å–∫–∏–¥–∫–∞–º–∏ —Ü–µ–Ω—ã –≤—Å–µ—Ö –±–∏–ª–µ—Ç–æ–≤ –¥–æ–ª–∂–Ω—ã —É–º–µ–Ω—å—à–∏—Ç—å—Å—è –Ω–∞
// —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç.

// ü™õ –ó–∞–¥–∞—á–∞:
// –ü–µ—Ä–µ–ø–∏—à–∏—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–µ–π—Ç–∞ —Ç–∞–∫, —á—Ç–æ–±—ã —Ü–µ–Ω–∞ –∫–∞–∂–¥–æ–≥–æ –±–∏–ª–µ—Ç–∞ —É–º–µ–Ω—å—à–∞–ª–∞—Å—å –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç.
// –í –∫–∞—á–µ—Å—Ç–≤–µ –æ—Ç–≤–µ—Ç–∞ —É–∫–∞–∂–∏—Ç–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É –∫–æ–¥–∞.
// ‚ùó–û–ø–µ—Ä–∞—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –º—É—Ç–∞–±–µ–ª—å–Ω—ã–º –æ–±—Ä–∞–∑–æ–º.
// ‚ùó–ù–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏–∑–∞—Ü–∏—é action.payload (const {id} = action.payload)
// ‚ùó–ù–µ —Å–æ–∑–¥–∞–≤–∞–π—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ action.payload (const id = action.payload.id)