import { configureStore, nanoid } from "@reduxjs/toolkit";
import { createApi, fetchBaseQuery } from "@reduxjs/toolkit/query/react";
import { createRoot } from "react-dom/client";
import { Provider } from "react-redux";

type Post = {
	body: string;
	id: string;
	title: string;
	userId: string;
};

const api = createApi({
	reducerPath: "api",
	baseQuery: fetchBaseQuery({ baseUrl: "https://exams-frontend.kimitsu.it-incubator.io/api/" }),
	tagTypes: ["Post"],
	endpoints: (builder) => {
		return {
			getPosts: builder.query<Post[], void>({
				query: () => "posts",
				providesTags: ["Post"],
			}),
			removePost: builder.mutation<{ message: string }, string>({
				query: (id) => ({
					method: "DELETE",
					url: `posts/${id}`,
				}),
				invalidatesTags: ["Post"],
			}),
		};
	},
});

const { useGetPostsQuery, useRemovePostMutation } = api;

// App.tsx
const App = () => {
	const { data: posts } = useGetPostsQuery();
	const [removePost] = useRemovePostMutation();

	const removePostHandler = (id: string) => {
		removePost(nanoid())
			.unwrap()//‚úÖ‚úÖ‚úÖ
			.then(() => {
				alert(`‚úÖ The post was successfully deleted`);
			})
			.catch((err) => {
				alert(`‚ùå The post was not deleted: ${err.data.errors}`);
			});
	};

	return (
		<>
			{posts?.map((el) => {
				return (
					<div style={{ display: "flex", alignItems: "center" }}>
						<div
							key={el.id}
							style={{ border: "1px solid", margin: "5px", padding: "5px", width: "200px" }}
						>
							<p>
								<b>title</b> - {el.title}
							</p>
						</div>
						<button onClick={() => removePostHandler(el.id)}>x</button>
					</div>
				);
			})}
		</>
	);
};

// store.ts
const store = configureStore({
	reducer: { [api.reducerPath]: api.reducer },
	middleware: (getDefaultMiddleware) => getDefaultMiddleware().concat(api.middleware),
});

createRoot(document.getElementById("root")!).render(
	<Provider store={store}>
		<App />
	</Provider>,
);

// üìú –û–ø–∏—Å–∞–Ω–∏–µ:
// –ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É —É–¥–∞–ª–µ–Ω–∏—è –ø–æ—Å—Ç–∞ (—Ö), –≤—ã —É–≤–∏–¥–∏—Ç–µ alert —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º –æ —Ç–æ–º, —á—Ç–æ –ø–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ
// —É–¥–∞–ª–µ–Ω.
// –ù–æ –Ω–∞ —Å–∞–º–æ–º –¥–µ–ª–µ –ø–∞–¥–∞–µ—Ç –æ—à–∏–±–∫–∞. –û—Ç–∫—Ä–æ–π—Ç–µ –ø–∞–Ω–µ–ª—å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∏ –ø–æ—Å–º–æ—Ç—Ä–∏—Ç–µ network.
// –ó–∞–ø—Ä–æ—Å –ø–∞–¥–∞–µ—Ç —Å 400 –æ—à–∏–±–∫–æ–π

// ü™õ –ó–∞–¥–∞—á–∞:
// –ß—Ç–æ –Ω—É–∂–Ω–æ –¥–æ–ø–∏—Å–∞—Ç—å –≤ –∫–æ–¥–µ, —á—Ç–æ–±—ã –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –æ—Ç—Ä–∞–±–æ—Ç–∞–ª catch –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–≤–∏–¥–µ–ª
// —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ.
// –í –∫–∞—á–µ—Å—Ç–≤–µ –æ—Ç–≤–µ—Ç–∞ —É–∫–∞–∂–∏—Ç–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–π –≤–∞–º–∏ –∫–æ–¥
// ‚ùó–ß–∏–Ω–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–∞ –Ω–µ –Ω—É–∂–Ω–æ