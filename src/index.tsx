import React, { useEffect } from "react";
import ReactDOM from "react-dom/client";
import { ThunkAction, ThunkDispatch } from "redux-thunk";
import { Provider, TypedUseSelectorHook, useDispatch, useSelector } from "react-redux";
import axios from "axios";
import { configureStore, combineReducers } from "@reduxjs/toolkit";

// Types
type CommentType = {
	postId: string;
	id: string;
	name: string;
	email: string;
	body: string;
};

// Api
const instance = axios.create({ baseURL: "https://exams-frontend.kimitsu.it-incubator.io/api/" });

const commentsAPI = {
	getComments() {
		return instance.get<CommentType[]>("comments");
	},
	createComment() {
		const payload = {
			body: "–≠—Ç–æ –ø—Ä–æ—Å—Ç–æ –∑–∞–≥–ª—É—à–∫–∞. Backend —Å–∞–º —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –Ω–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∏ –≤–µ—Ä–Ω–µ—Ç –µ–≥–æ –≤–∞–º",
		};
		return instance.post("comments", payload);
	},
};

// Reducer
const initState = [] as CommentType[];

type InitStateType = typeof initState;

const commentsReducer = (state: InitStateType = initState, action: ActionsType) => {
	switch (action.type) {
		case "COMMENTS/GET-COMMENTS":
			return action.comments;
		case "COMMENTS/CREATE-COMMENT":
			return [action.comment, ...state];
		default:
			return state;
	}
};

const getCommentsAC = (comments: CommentType[]) =>
	({ type: "COMMENTS/GET-COMMENTS", comments }) as const;
const createCommentAC = (comment: CommentType) =>
	({ type: "COMMENTS/CREATE-COMMENT", comment }) as const;

type ActionsType = ReturnType<typeof getCommentsAC> | ReturnType<typeof createCommentAC>;

const getCommentsTC = (): AppThunk => (dispatch) => {
	commentsAPI.getComments().then((res) => {
		dispatch(getCommentsAC(res.data));
	});
};

const addCommentTC = (): AppThunk => (dispatch) => {
	commentsAPI.createComment().then((res) => {
		dispatch(createCommentAC(res.data));
	});
};

// Store
const rootReducer = combineReducers({
	comments: commentsReducer,
});

const store = configureStore({ reducer: rootReducer });
type RootState = ReturnType<typeof store.getState>;
type AppDispatch = ThunkDispatch<RootState, unknown, ActionsType>;
type AppThunk<ReturnType = void> = ThunkAction<ReturnType, RootState, unknown, ActionsType>;
const useAppDispatch = () => useDispatch<AppDispatch>();
const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;

// App
const App = () => {
	const dispatch = useAppDispatch();
	const comments = useAppSelector((state) => state.comments);

	useEffect(() => {
		dispatch(getCommentsTC());
	}, []);

	const addCommentHandler = () => {
		alert("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–æ–±–∞–≤–∏—Ç—å –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å. –ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–¥ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ üöÄ");
	};

	return (
		<>
			<h1>üìù –°–ø–∏—Å–æ–∫ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤</h1>
			<button style={{ marginBottom: "10px" }} onClick={addCommentHandler}>
				–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
			</button>
			{comments.map((p) => {
				return (
					<div key={p.id}>
						<b>–æ–ø–∏—Å–∞–Ω–∏–µ</b>: {p.body}
					</div>
				);
			})}
		</>
	);
};

const root = ReactDOM.createRoot(document.getElementById("root") as HTMLElement);
root.render(
	<Provider store={store}>
		<App />
	</Provider>,
);

// üìú –û–ø–∏—Å–∞–Ω–∏–µ:
// –ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É "–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π" –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–æ–ª–∂–µ–Ω –¥–æ–±–∞–≤–∏—Ç—å—Å—è,
// –Ω–æ –ø–æ—è–≤–ª—è–µ—Ç—Å—è alert.
// –í–º–µ—Å—Ç–æ alerta –Ω–∞–ø–∏—à–∏—Ç–µ –∫–æ–¥, —á—Ç–æ–±—ã –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–æ–±–∞–≤–ª—è–ª—Å—è.
// –ü—Ä–∞–≤–∏–ª—å–Ω—É—é –≤–µ—Ä—Å–∏—é —Å—Ç—Ä–æ–∫–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –æ—Ç–≤–µ—Ç–∞.

// üñ• –ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: return instance.get<CommentType[]>('comments?_limit=10')