import { configureStore, createSlice } from "@reduxjs/toolkit";
import { createApi, fetchBaseQuery } from "@reduxjs/toolkit/query/react";
import { createRoot } from "react-dom/client";
import { Provider, useSelector } from "react-redux";

// App slice
type NotificationLevel = "loading" | "none" | "success" | "error";

const appSlice = createSlice({
	name: "app",
	initialState: {
		notification: "none" as NotificationLevel,
	},
	reducers: {},
	extraReducers: (builder) => {
		builder
			.addMatcher<NotificationLevel>(
				(action) => action.type.endsWith("/pending"),
				(state) => {
					state.notification = "loading"
				},
			)
			.addMatcher<NotificationLevel>(
				(action) => action.type.endsWith("/fulfilled"),
				(state) => {
					state.notification = "success"
				},
			)
			.addMatcher<NotificationLevel>(
				(action) => action.type.endsWith("/rejected"),
				(state) => {
					state.notification = "error"
				},
			)
	},
	selectors: {
		selectNotification: (slice) => slice.notification,
	},
});

const { selectNotification } = appSlice.selectors;

// Api
type Photo = {
	albumId: string;
	id: string;
	title: string;
	url: string;
};

const api = createApi({
	reducerPath: "api",
	baseQuery: fetchBaseQuery({ baseUrl: "https://exams-frontend.kimitsu.it-incubator.io/api/" }),
	endpoints: (builder) => ({
		getPhotos: builder.query<Photo[], void>({
			query: () => "photos?delay=2",
		}),
	}),
});

const { useGetPhotosQuery } = api;

// App.tsx
const App = () => {
	const notification = useAppSelector(selectNotification);

	const { data } = useGetPhotosQuery();

	return (
		<>
			{notification === "loading" && <b style={{ fontSize: "36px" }}>üïù–ó–∞–≥—Ä—É–∑–∫–∞...</b>}
			{notification === "success" && <b style={{ fontSize: "36px" }}>‚úÖ –£—Å–ø–µ—Ö</b>}
			{notification === "error" && <b style={{ fontSize: "36px" }}>‚ùå –û—à–∏–±–∫–∞</b>}
			{data?.map((el) => {
				return (
					<div key={el.id} style={{ margin: "5px", padding: "5px", width: "200px" }}>
						<b>title</b> - {el.title}
						<img src={el.url} alt={`${el.title} image`} />
					</div>
				);
			})}
		</>
	);
};

// store.ts
const store = configureStore({
	reducer: {
		[appSlice.name]: appSlice.reducer,
		[api.reducerPath]: api.reducer,
	},
	middleware: (getDefaultMiddleware) => getDefaultMiddleware().concat(api.middleware),
});

type RootState = ReturnType<typeof store.getState>;
const useAppSelector = useSelector.withTypes<RootState>();

createRoot(document.getElementById("root")!).render(
	<Provider store={store}>
		<App />
	</Provider>,
);
// üìú –û–ø–∏—Å–∞–Ω–∏–µ:
// –ü—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–∏–¥–∏—Ç –ø—É—Å—Ç–æ–π —ç–∫—Ä–∞–Ω –∏ —Ç–æ–ª—å–∫–æ —Å–ø—É—Å—Ç—è 2 —Å–µ–∫—É–Ω–¥—ã –≤–∏–¥–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.

// ü™õ –ó–∞–¥–∞—á–∞:
// –ß—Ç–æ –Ω—É–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å –≤–º–µ—Å—Ç–æ `// ‚ùó‚ùó‚ùóXXX‚ùó‚ùó‚ùó` –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
// –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–≤–∏–¥–µ–ª `üïù–ó–∞–≥—Ä—É–∑–∫–∞...`, –≤ —Å–ª—É—á–∞–µ —É—Å–ø–µ—à–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ —É–≤–∏–¥–µ–ª `‚úÖ –£—Å–ø–µ—Ö`, –∞ –≤ —Å–ª—É—á–∞–µ
// –æ—à–∏–±–∫–∏ `‚ùå –û—à–∏–±–∫–∞`

// üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞: –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ addMatcher
// // ‚ùó–ü–æ—Ä—è–¥–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–æ—Ç–∏—Ñ–∏–∫–∞—Ü–∏–π: –∑–∞–≥—Ä—É–∫–∞, —É—Å–ø–µ—Ö, –æ—à–∏–±–∫–∞