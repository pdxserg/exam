import { configureStore, createSlice } from "@reduxjs/toolkit"
import { createRoot } from "react-dom/client"
import { Provider, useDispatch, useSelector } from "react-redux"

type Note = {
	id: number
	content: string
	important: boolean
}

// slice
const slice = createSlice({
	name: "notes",
	initialState: {
		items: [
			{ id: 1, content: "Buy groceries", important: false },
			{ id: 2, content: "Schedule meeting", important: true },
			{ id: 3, content: "Call mom", important: false },
		],
	},
	reducers: {
		updateNote: (state, action) => {
			return state
		},
	},
})

const { updateNote } = slice.actions

// App.tsx
const App = () => {
	const notes = useSelector((state: RootState) => state.notes.items)
	const dispatch = useDispatch()

	const toggleImportance = (note: Note) => {
		dispatch(updateNote({ id: note.id, important: !note.important }))
	}

	return (
		<ul>
			{notes.map((note) => (
				<li key={note.id}>
          <span
	          style={{
		          fontWeight: note.important ? "bold" : "normal",
	          }}
          >
            {note.content}
          </span>
					<button onClick={() => toggleImportance(note)}>{note.important ? "Unmark" : "Mark Important"}</button>
				</li>
			))}
		</ul>
	)
}

// store.ts
export const store = configureStore({
	reducer: {
		notes: slice.reducer,
	},
})

export type RootState = ReturnType<typeof store.getState>

// main.ts
createRoot(document.getElementById("root")!).render(
	<Provider store={store}>
		<App />
	</Provider>,
)

// üìú –û–ø–∏—Å–∞–Ω–∏–µ:
// –ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É Mark Important –∏–ª–∏ Unmark —Ä—è–¥–æ–º —Å –∑–∞–º–µ—Ç–∫–æ–π, –≤–∞–∂–Ω–æ—Å—Ç—å –∑–∞–º–µ—Ç–∫–∏ –Ω–µ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è ü•≤

// ü™õ –ó–∞–¥–∞—á–∞:
// –ü–µ—Ä–µ–ø–∏—à–∏—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–µ–π—Ç–∞ —Ç–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º, —á—Ç–æ–±—ã –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É Mark Important –∏–ª–∏ Unmark,
// —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–∞–∂–Ω–æ—Å—Ç–∏ –∑–∞–º–µ—Ç–∫–∏ –æ–±–Ω–æ–≤–ª—è–ª–æ—Å—å.
// –í –∫–∞—á–µ—Å—Ç–≤–µ –æ—Ç–≤–µ—Ç–∞ —É–∫–∞–∂–∏—Ç–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É –∫–æ–¥–∞.
// ‚ùó–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–µ–π—Ç–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–æ –º—É—Ç–∞–±–µ–ª—å–Ω—ã–º –æ–±—Ä–∞–∑–æ–º
// ‚ùó–ù–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏–∑–∞—Ü–∏—é action.payload (const {id} = action.payload)
// ‚ùó–ù–µ —Å–æ–∑–¥–∞–≤–∞–π—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ action.payload (const id = action.payload.id)