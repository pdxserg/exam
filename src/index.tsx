import { configureStore, createSlice, nanoid } from "@reduxjs/toolkit"
import { createRoot } from "react-dom/client"
import { Provider, useDispatch, useSelector } from "react-redux"

// slice
const slice = createSlice({
	name: "fruits",
	initialState: {
		basket: [
			{ id: 1, name: "Apple" },
			{ id: 2, name: "Banana" },
		],
	},
	reducers: {
		addFruit: (state, action) => {
			state.basket.push(action.payload)
		},
	},
})

const { addFruit } = slice.actions

// App.tsx
const App = () => {
	const fruits = useSelector((state: RootState) => state.fruits.basket)
	const dispatch = useDispatch()

	const addNewFruit = () => {
		const newFruit = { id: nanoid(), name: "Orange" }
		dispatch(addFruit(newFruit))
	}

	return (
		<>
			<button onClick={addNewFruit}>Add Fruit</button>
			<ul>
				{fruits.map((fruit) => (
					<li key={fruit.id}>{fruit.name}</li>
				))}
			</ul>
		</>
	)
}

// store.ts
export const store = configureStore({
	reducer: {
		fruits: slice.reducer,
	},
})

export type RootState = ReturnType<typeof store.getState>

// main.ts
createRoot(document.getElementById("root")!).render(
	<Provider store={store}>
		<App />
	</Provider>,
)

// üìú –û–ø–∏—Å–∞–Ω–∏–µ:
// –ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É Add Fruit, –Ω–æ–≤—ã–π —Ñ—Ä—É–∫—Ç –Ω–µ –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –≤ –∫–æ—Ä–∑–∏–Ω—É ü•≤

// ü™õ –ó–∞–¥–∞—á–∞:
// –ü–µ—Ä–µ–ø–∏—à–∏—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–µ–π—Ç–∞ —Ç–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º, —á—Ç–æ–±—ã –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É Add Fruit,
// –Ω–æ–≤—ã–π —Ñ—Ä—É–∫—Ç –¥–æ–±–∞–≤–ª—è–ª—Å—è –≤ –∫–æ—Ä–∑–∏–Ω—É
// –í –∫–∞—á–µ—Å—Ç–≤–µ –æ—Ç–≤–µ—Ç–∞ —É–∫–∞–∂–∏—Ç–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É –∫–æ–¥–∞.
// ‚ùó–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–µ–π—Ç–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–æ –º—É—Ç–∞–±–µ–ª—å–Ω—ã–º –æ–±—Ä–∞–∑–æ–º