import { configureStore } from "@reduxjs/toolkit";
import { createApi, fetchBaseQuery } from "@reduxjs/toolkit/query/react";
import React from "react";
import { createRoot } from "react-dom/client";
import { Provider } from "react-redux";

// Types
type Todolist = {
	id: string;
	title: string;
	order: number;
	createdAt: string;
	updatedAt: string;
	completed: boolean;
};

const api = createApi({
	reducerPath: "api",
	baseQuery: async (args, api, extraOptions) => {
		await new Promise((resolve) => setTimeout(resolve, 1000)); // –≠–º—É–ª—è—Ü–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏

		return fetchBaseQuery({ baseUrl: "https://exams-frontend.kimitsu.it-incubator.io/api/" })(
			args,
			api,
			extraOptions,
		);
	},
	endpoints: (builder) => {
		const url = Math.random() < 0.5 ? "todos" : "todosüë∫";
		return {
			todolists: builder.query<Todolist[], void>({
				query: () => url,
			}),
		};
	},
});

const { useTodolistsQuery } = api;

// Component
const App = () => {
	// ‚ùó–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏–∑–∞—Ü–∏—é –∑–∞–ø—Ä–µ—â–µ–Ω–æ
	const {data, isLoading, isError, isFetching} = useTodolistsQuery();


	return (
		<>
			{
				<>
					{data?.map((t) => {
						return (import { configureStore } from "@reduxjs/toolkit";
						import { createApi, fetchBaseQuery } from "@reduxjs/toolkit/query/react";
						import React from "react";
						import { createRoot } from "react-dom/client";
						import { Provider, useDispatch } from "react-redux";
						import { BrowserRouter, NavLink, Route, Routes, useNavigate } from "react-router";

						type Product = {
							id: string;
							title: string;
							description: string;
							price: number;
						};

						type ProductsResponse = {
							total: number;
							messages: string[];
							page: number;
							pageCount: number;
							data: Product[];
						};

						type Film = {
							id: number;
							nameOriginal: string;
							description: string;
							ratingImdb: number;
						};

						type FilmsResponse = {
							total: number;
							messages: string[];
							page: number;
							pageCount: number;
							data: Film[];
						};

// Api
						const api = createApi({
							reducerPath: "api",
							baseQuery: fetchBaseQuery({ baseUrl: "https://exams-frontend.kimitsu.it-incubator.io/api/" }),
							endpoints: (builder) => {
								return {
									getFilms: builder.query<FilmsResponse, void>({
										query: () => "films",
									}),
									getProducts: builder.query<ProductsResponse, void>({
										query: () => "products",
									}),
								};
							},
						});

						const { useGetFilmsQuery, useGetProductsQuery } = api;

// Films.tsx
						const Films = () => {
							const { data } = useGetFilmsQuery();

							return (
								<>
									<h1>Films</h1>
									{data?.data.map((el) => (
										<div key={el.id} style={{ margin: "15px" }}>
											movie title - <b>{el.nameOriginal}</b>
										</div>
									))}
								</>
							);
						};

						const Products = () => {
							const { data } = useGetProductsQuery();

							return (
								<>
									<h1>Products</h1>
									{data?.data.map((el) => (
										<div key={el.id} style={{ margin: "15px" }}>
											title - <b>{el.title}</b>
										</div>
									))}
								</>
							);
						};

						export const App = () => {
							const navigate = useNavigate();

							const dispatch = useDispatch();

							const leaveSiteHandler = () => {
								navigate("/");
								// ‚ùó‚ùó‚ùóXXX‚ùó‚ùó‚ùó
							};

							return (
								<>
									<header style={{ display: "flex", alignItems: "center", gap: "10px", border: "1px solid" }}>
										<ul>
											Menu:
											<li>
												<NavLink to={"films"}>Films</NavLink>
											</li>
											<li>
												<NavLink to={"products"}>Products</NavLink>
											</li>
										</ul>
										<button onClick={leaveSiteHandler}>Leave the site</button>
									</header>

									<Routes>
										<Route path={"/"} element={<h1>Home page</h1>} />
										<Route path={"/films"} element={<Films />} />
										<Route path={"/products"} element={<Products />} />
									</Routes>
								</>
							);
						};

// store.ts
						const store = configureStore({
							reducer: { [api.reducerPath]: api.reducer },
							middleware: (getDefaultMiddleware) => getDefaultMiddleware().concat(api.middleware),
						});

						createRoot(document.getElementById("root")!).render(
							<BrowserRouter>
								<Provider store={store}>
									<App />
								</Provider>
							</BrowserRouter>,
						);

// üìú –û–ø–∏—Å–∞–Ω–∏–µ:
// –ü–µ—Ä–µ–π–¥–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ñ–∏–ª—å–º–æ–≤ –∏ —É–±–µ–¥–∏—Å—å, —á—Ç–æ —Ñ–∏–ª—å–º—ã –ø–æ–¥–≥—Ä—É–∑–∏–ª–∏—Å—å
// –ü–µ—Ä–µ–π–¥–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∏ —É–±–µ–¥–∏—Å—å, —á—Ç–æ –ø—Ä–æ–¥—É–∫—Ç—ã –ø–æ–¥–≥—Ä—É–∑–∏–ª–∏—Å—å
// –û—Ç–∫—Ä–æ–π redux devtools –∏ —É–±–µ–¥–∏—Å—å, —á—Ç–æ —Ñ–∏–ª—å–º—ã –∏ –ø—Ä–æ–¥—É–∫—Ç—ã —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏—Å—å –≤ –∫–µ—à–µ

// ü™õ –ó–∞–¥–∞—á–∞:
// –ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É `Leave the site` –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—á–∏—Å—Ç—å –≤–µ—Å—å RTK query –∫–µ—à
// –ß—Ç–æ –Ω—É–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å –≤–º–µ—Å—Ç–æ `// ‚ùó‚ùó‚ùóXXX‚ùó‚ùó‚ùó`, —á—Ç–æ–±—ã —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—É—é –∑–∞–¥–∞—á—É

						<div style={t.completed ? { color: "grey" } : {}} key={t.id}>
								<input type="checkbox" checked={t.completed} />
								<b>–û–ø–∏—Å–∞–Ω–∏–µ</b>: {t.title}
							</div>
						);
					})}
				</>
			}
			{isLoading && <h2>–ó–∞–≥—Ä—É–∑–∫–∞...</h2>}
			{isFetching && <h2>üë©‚Äçüíª –°–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–æ–¥: BHOlh#</h2>}
			{isError&& <h2> Error: üë∫üë∫üë∫</h2>}
		</>
	);
};

// Store
const store = configureStore({
	reducer: {
		[api.reducerPath]: api.reducer,
	},
	middleware: (getDefaultMiddleware) => getDefaultMiddleware().concat(api.middleware),
});

createRoot(document.getElementById("root")!).render(
	<Provider store={store}>
		<App />
	</Provider>,
);

// üìú –û–ø–∏—Å–∞–Ω–∏–µ:
// –¢—É–¥—É–ª–∏—Å—Ç—ã —Å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é –≤ 50% –ø–æ–¥–≥—Ä—É–∂–∞—é—Å—è —É—Å–ø–µ—à–Ω–æ –∏–ª–∏ –ø–∞–¥–∞—é—Ç —Å –æ—à–∏–±–∫–æ–π.
// –ù–æ –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ –Ω–∞ —ç–∫—Ä–∞–Ω–µ –º—ã –≤–∏–¥–∏–º: –ó–∞–≥—Ä—É–∑–∫—É, —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–æ–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ

// ü™õ –ó–∞–¥–∞—á–∞:
// –ß—Ç–æ –Ω—É–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å –≤–º–µ—Å—Ç–æ "‚ùóX","‚ùóY" –∏ "‚ùóZ" –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã:
// 1. –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–∫–∞–∑—ã–≤–∞–ª–∞—Å—å —Ç–æ–ª—å–∫–æ –≤–æ –≤—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏
// 2. –°–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–æ–¥ –ø–æ–∫–∞–∑—ã–≤–∞–ª–∞—Å—å —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ
// 3. –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑—ã–≤–∞–ª–∞—Å—å —Ç–æ–ª—å–∫–æ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏

// ‚ùó –û—Ç–≤–µ—Ç –¥–∞–π—Ç–µ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª
// üñ• –ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: one two three