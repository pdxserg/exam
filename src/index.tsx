import { configureStore, createSlice } from "@reduxjs/toolkit";
import { createRoot } from "react-dom/client";
import { Provider, useDispatch, useSelector } from "react-redux";

// slice
const slice = createSlice({
	name: "classroom",
	initialState: {
		students: [
			{ id: 1, name: "Alice" },
			{ id: 2, name: "Bob" },
			{ id: 3, name: "Charlie" },
		],
	},
	reducers: {
		removeStudent: (state, action) => {
			const index = state.students.findIndex((t) => t.id === action.payload.id)
			if (index !== -1) {
				state.students.splice(index, 1)
			}
		},
	},
});

const { removeStudent } = slice.actions;

// App.tsx
const App = () => {
	const students = useSelector((state: RootState) => state.classroom.students);
	const dispatch = useDispatch();

	const handleRemove = (id: number) => {
		dispatch(removeStudent(id));
	};

	return (
		<ul>
			{students.map((student) => (
				<li key={student.id}>
					{student.name}
					<button onClick={() => handleRemove(student.id)}>‚úñ</button>
				</li>
			))}
		</ul>
	);
};

// store.ts
export const store = configureStore({
	reducer: {
		classroom: slice.reducer,
	},
});

export type RootState = ReturnType<typeof store.getState>;

// main.ts
createRoot(document.getElementById("root")!).render(
	<Provider store={store}>
		<App />
	</Provider>,
);

// üìú –û–ø–∏—Å–∞–Ω–∏–µ:
// –ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É ‚úñ —Ä—è–¥–æ–º —Å –∏–º–µ–Ω–µ–º —Å—Ç—É–¥–µ–Ω—Ç–∞, —Å—Ç—É–¥–µ–Ω—Ç –Ω–µ —É–¥–∞–ª—è–µ—Ç—Å—è –∏–∑ —Å–ø–∏—Å–∫–∞ ü•≤

// ü™õ –ó–∞–¥–∞—á–∞:
// –ü–µ—Ä–µ–ø–∏—à–∏—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–µ–π—Ç–∞ —Ç–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º, —á—Ç–æ–±—ã –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É ‚úñ, —Å—Ç—É–¥–µ–Ω—Ç —É–¥–∞–ª—è–ª—Å—è –∏–∑ —Å–ø–∏—Å–∫–∞.
// –í –∫–∞—á–µ—Å—Ç–≤–µ –æ—Ç–≤–µ—Ç–∞ —É–∫–∞–∂–∏—Ç–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É –∫–æ–¥–∞.
// ‚ùó–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–µ–π—Ç–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–æ –º—É—Ç–∞–±–µ–ª—å–Ω—ã–º –æ–±—Ä–∞–∑–æ–º
// ‚ùó–ù–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏–∑–∞—Ü–∏—é action.payload (const {id} = action.payload)
// ‚ùó–ù–µ —Å–æ–∑–¥–∞–≤–∞–π—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ action.payload (const id = action.payload.id)