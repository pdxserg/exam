import { configureStore } from "@reduxjs/toolkit";
import { createApi, fetchBaseQuery } from "@reduxjs/toolkit/query/react";
import React from "react";
import { createRoot } from "react-dom/client";
import { Provider, useDispatch } from "react-redux";

type User = {
	id: string;
	name: string;
	age: number;
};

type UsersResponse = {
	items: User[];
	totalCount: number;
};

// Api
const api = createApi({
	reducerPath: "api",
	baseQuery: fetchBaseQuery({ baseUrl: "https://exams-frontend.kimitsu.it-incubator.io/api/" }),
	endpoints: (builder) => {
		return {
			getUsers: builder.query<UsersResponse, void>({
				query: () => "users",
			}),
		};
	},
});

const { useGetUsersQuery } = api;

// Users.tsx
const Users = () => {
	const { data } = useGetUsersQuery();

	const dispatch = useAppDispatch();

	const addSmileHandler = (id: string) => {
		const smile = "üòÅ";
		// ‚ùó‚ùó‚ùóXXX‚ùó‚ùó‚ùó
	};

	return (
		<>
			<h1>Users</h1>
			{data?.items.map((el) => (
				<div key={el.id}>
					name - <b>{el.name}</b>
					<button onClick={() => addSmileHandler(el.id)}>Add smile</button>
				</div>
			))}
		</>
	);
};

// store.ts
const store = configureStore({
	reducer: { [api.reducerPath]: api.reducer },
	middleware: (getDefaultMiddleware) => getDefaultMiddleware().concat(api.middleware),
});

type AppDispatch = typeof store.dispatch;
const useAppDispatch = useDispatch.withTypes<AppDispatch>();

createRoot(document.getElementById("root")!).render(
	<Provider store={store}>
		<Users />
	</Provider>,
);

// üìú –û–ø–∏—Å–∞–Ω–∏–µ:
// –û—Ç–∫—Ä–æ–π—Ç–µ redux devtools –∏ —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞ —Ö—Ä–∞–Ω—è—Ç—Å—è –≤ –∫–µ—à–µ
// http://surl.li/veofpd
// ü™õ –ó–∞–¥–∞—á–∞:
// –ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É `Add smile` –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∏–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ –∫–µ—à–µ –∏ –¥–æ–±–∞–≤–∏—Ç—å –∫ –∏–º–µ–Ω–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
// smile
// –†–µ–∑—É–ª—å—Ç–∞—Ç: http://surl.li/kgmhtn
// –ß—Ç–æ –Ω—É–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å –≤–º–µ—Å—Ç–æ `// ‚ùó‚ùó‚ùóXXX‚ùó‚ùó‚ùó`, —á—Ç–æ–±—ã —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—É—é –∑–∞–¥–∞—á—É
// ‚ùó–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–µ–π—Ç–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–æ –º—É—Ç–∞–±–µ–ª—å–Ω—ã–º –æ–±—Ä–∞–∑–æ–º
// ‚ùóupdateRecipe –∫–æ–ª–ª–±–µ–∫ –≤ –∫–∞—á–µ—Ç—Å—Ç–≤–µ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Å—Ç–µ–π—Ç. –ù–∞–∑–æ–≤–∏—Ç–µ —ç—Ç—É –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é state